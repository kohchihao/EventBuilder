# Generated by Django 2.2.6 on 2019-10-12 13:16

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gql.utils.random


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('code', models.CharField(max_length=2, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator(message='Length has to be 2', regex='^.{2}$')])),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='CuratedAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('unit', models.CharField(max_length=255)),
                ('markup', models.FloatField()),
                ('tax', models.FloatField()),
                ('country_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gql.Country')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gql.ServiceType')),
            ],
        ),
        migrations.CreateModel(
            name='PriceStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField()),
                ('amount', models.IntegerField()),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_structures', to='gql.Service')),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('countries', models.ManyToManyField(to='gql.Country')),
                ('service_types', models.ManyToManyField(to='gql.ServiceType')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.CharField(default=gql.utils.random.pk_gen, max_length=64, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendees', models.IntegerField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gql.Event')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gql.EventType')),
            ],
        ),
        migrations.CreateModel(
            name='CuratedEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('visibility', models.BooleanField(default=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gql.Country')),
                ('services', models.ManyToManyField(related_name='curated_events', through='gql.CuratedAgreement', to='gql.Service')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gql.EventType')),
            ],
        ),
        migrations.AddField(
            model_name='curatedagreement',
            name='curated_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curated_agreements', to='gql.CuratedEvent'),
        ),
        migrations.AddField(
            model_name='curatedagreement',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curated_agreements', to='gql.Service'),
        ),
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('ACCEPTED', 'ACCEPTED'), ('REJECTED', 'REJECTED'), ('CANCELLED', 'CANCELLED'), ('HAVE_NOT_REQUESTED', 'HAVE_NOT_REQUESTED')], default='HAVE_NOT_REQUESTED', max_length=255)),
                ('note', models.CharField(default='', max_length=255)),
                ('price', models.IntegerField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gql.Event')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agreements', to='gql.Service')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='countries',
            field=models.ManyToManyField(to='gql.Country'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
